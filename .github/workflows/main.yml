name: vprofile actions
on: 
  push:
    branches:
      - main

permissions:
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofile-project-app
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Check AWS CLI and jq installation
        run: |
          aws --version
          jq --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::182399687748:role/github-action-OICD
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve SonarQube secrets
        id: get-secrets
        run: |
          SONAR_URL=$(aws secretsmanager get-secret-value --secret-id githubs-actions-secrets --query 'SecretString' --output text | jq -r '.SONAR_URL')
          SONAR_TOKEN=$(aws secretsmanager get-secret-value --secret-id githubs-actions-secrets --query 'SecretString' --output text | jq -r '.SONAR_TOKEN')
          SONAR_ORGANIZATION=$(aws secretsmanager get-secret-value --secret-id githubs-actions-secrets --query 'SecretString' --output text | jq -r '.SONAR_ORGANIZATION')
          SONAR_PROJECT_KEY=$(aws secretsmanager get-secret-value --secret-id githubs-actions-secrets --query 'SecretString' --output text | jq -r '.SONAR_PROJECT_KEY')
          echo "SONAR_URL=$SONAR_URL" >> $GITHUB_ENV
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "SONAR_ORGANIZATION=$SONAR_ORGANIZATION" >> $GITHUB_ENV
          echo "SONAR_PROJECT_KEY=$SONAR_PROJECT_KEY" >> $GITHUB_ENV
          echo "Retrieved SONAR_URL: $SONAR_URL"
          echo "Retrieved SONAR_TOKEN: ***"
          echo "Retrieved SONAR_ORGANIZATION: $SONAR_ORGANIZATION"
          echo "Retrieved SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY"

      - name: Test SonarQube server connection
        run: |
          echo "Testing connection to SonarQube server: ${{ env.SONAR_URL }}"
          curl -I ${{ env.SONAR_URL }}

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          echo "Using SONAR_URL: ${{ env.SONAR_URL }}"
          echo "Using SONAR_ORGANIZATION: ${{ env.SONAR_ORGANIZATION }}"
          echo "Using SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}"
          sonar-scanner -X \
            -Dsonar.host.url=${{ env.SONAR_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_URL }}
       
  jobs:
  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::182399687748:role/github-action-OICD
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve secrets
        id: get-secrets
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id githubs-actions-secrets --query 'SecretString' --output text)
          echo "Raw secret JSON: $SECRET_JSON"
          REGISTRY=$(echo "$SECRET_JSON" | jq -r '.REGISTRY')
          AWS_ACCESS_KEY_ID=$(echo "$SECRET_JSON" | jq -r '.AWS_ACCESS_KEY_ID')
          AWS_SECRET_ACCESS_KEY=$(echo "$SECRET_JSON" | jq -r '.AWS_SECRET_ACCESS_KEY')
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "Retrieved REGISTRY: $REGISTRY"
          echo "Retrieved AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "Retrieved AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ env.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ env.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./


  DeployToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::182399687748:role/github-action-OICD
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Print config file
        run: cat ~/.kube/config

      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password) 

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          role-to-assume: arn:aws:iam::182399687748:role/github-action-OICD
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          #config-files: .github/values/dev.yaml
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: vprofile-stack